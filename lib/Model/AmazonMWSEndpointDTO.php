<?php
/**
 * AmazonMWSEndpointDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  eSagu\Amzn\RePricing\V1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eSagu amzn RePricing API
 *
 * eSagu API to reprice items on amazon.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace eSagu\Amzn\RePricing\V1\Model;

use \ArrayAccess;

/**
 * AmazonMWSEndpointDTO Class Doc Comment
 *
 * @category    Class
 * @package     eSagu\Amzn\RePricing\V1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AmazonMWSEndpointDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AmazonMWSEndpointDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'business_prices' => 'bool',
        'charset' => 'string',
        'marketplace' => 'string',
        'marketplace_id' => 'string',
        'mws_endpoint' => 'string',
        'supported' => 'bool',
        'inserted' => '\DateTime',
        'updated' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'business_prices' => 'businessPrices',
        'charset' => 'charset',
        'marketplace' => 'marketplace',
        'marketplace_id' => 'marketplaceId',
        'mws_endpoint' => 'mwsEndpoint',
        'supported' => 'supported',
        'inserted' => 'inserted',
        'updated' => 'updated'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'business_prices' => 'setBusinessPrices',
        'charset' => 'setCharset',
        'marketplace' => 'setMarketplace',
        'marketplace_id' => 'setMarketplaceId',
        'mws_endpoint' => 'setMwsEndpoint',
        'supported' => 'setSupported',
        'inserted' => 'setInserted',
        'updated' => 'setUpdated'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'business_prices' => 'getBusinessPrices',
        'charset' => 'getCharset',
        'marketplace' => 'getMarketplace',
        'marketplace_id' => 'getMarketplaceId',
        'mws_endpoint' => 'getMwsEndpoint',
        'supported' => 'getSupported',
        'inserted' => 'getInserted',
        'updated' => 'getUpdated'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CHARSET_ISO_8859_1 = 'ISO_8859_1';
    const CHARSET_SHIFT_JIS = 'SHIFT_JIS';
    const CHARSET_UTF_8 = 'UTF_8';
    const CHARSET_UTF_16 = 'UTF_16';
    const MARKETPLACE_BR = 'BR';
    const MARKETPLACE_CA = 'CA';
    const MARKETPLACE_MX = 'MX';
    const MARKETPLACE_US = 'US';
    const MARKETPLACE_AE = 'AE';
    const MARKETPLACE_DE = 'DE';
    const MARKETPLACE_EG = 'EG';
    const MARKETPLACE_ES = 'ES';
    const MARKETPLACE_FR = 'FR';
    const MARKETPLACE_UK = 'UK';
    const MARKETPLACE_IN = 'IN';
    const MARKETPLACE_IT = 'IT';
    const MARKETPLACE_NL = 'NL';
    const MARKETPLACE_PL = 'PL';
    const MARKETPLACE_SA = 'SA';
    const MARKETPLACE_SE = 'SE';
    const MARKETPLACE_TR = 'TR';
    const MARKETPLACE_SG = 'SG';
    const MARKETPLACE_AU = 'AU';
    const MARKETPLACE_JP = 'JP';
    const MARKETPLACE_CN = 'CN';
    const MARKETPLACE_UNKNOWN = 'UNKNOWN';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCharsetAllowableValues()
    {
        return [
            self::CHARSET_ISO_8859_1,
            self::CHARSET_SHIFT_JIS,
            self::CHARSET_UTF_8,
            self::CHARSET_UTF_16,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMarketplaceAllowableValues()
    {
        return [
            self::MARKETPLACE_BR,
            self::MARKETPLACE_CA,
            self::MARKETPLACE_MX,
            self::MARKETPLACE_US,
            self::MARKETPLACE_AE,
            self::MARKETPLACE_DE,
            self::MARKETPLACE_EG,
            self::MARKETPLACE_ES,
            self::MARKETPLACE_FR,
            self::MARKETPLACE_UK,
            self::MARKETPLACE_IN,
            self::MARKETPLACE_IT,
            self::MARKETPLACE_NL,
            self::MARKETPLACE_PL,
            self::MARKETPLACE_SA,
            self::MARKETPLACE_SE,
            self::MARKETPLACE_TR,
            self::MARKETPLACE_SG,
            self::MARKETPLACE_AU,
            self::MARKETPLACE_JP,
            self::MARKETPLACE_CN,
            self::MARKETPLACE_UNKNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['business_prices'] = isset($data['business_prices']) ? $data['business_prices'] : null;
        $this->container['charset'] = isset($data['charset']) ? $data['charset'] : null;
        $this->container['marketplace'] = isset($data['marketplace']) ? $data['marketplace'] : null;
        $this->container['marketplace_id'] = isset($data['marketplace_id']) ? $data['marketplace_id'] : null;
        $this->container['mws_endpoint'] = isset($data['mws_endpoint']) ? $data['mws_endpoint'] : null;
        $this->container['supported'] = isset($data['supported']) ? $data['supported'] : null;
        $this->container['inserted'] = isset($data['inserted']) ? $data['inserted'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["ISO_8859_1", "SHIFT_JIS", "UTF_8", "UTF_16"];
        if (!in_array($this->container['charset'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'charset', must be one of 'ISO_8859_1', 'SHIFT_JIS', 'UTF_8', 'UTF_16'.";
        }

        $allowed_values = ["BR", "CA", "MX", "US", "AE", "DE", "EG", "ES", "FR", "UK", "IN", "IT", "NL", "PL", "SA", "SE", "TR", "SG", "AU", "JP", "CN", "UNKNOWN"];
        if (!in_array($this->container['marketplace'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'marketplace', must be one of 'BR', 'CA', 'MX', 'US', 'AE', 'DE', 'EG', 'ES', 'FR', 'UK', 'IN', 'IT', 'NL', 'PL', 'SA', 'SE', 'TR', 'SG', 'AU', 'JP', 'CN', 'UNKNOWN'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["ISO_8859_1", "SHIFT_JIS", "UTF_8", "UTF_16"];
        if (!in_array($this->container['charset'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["BR", "CA", "MX", "US", "AE", "DE", "EG", "ES", "FR", "UK", "IN", "IT", "NL", "PL", "SA", "SE", "TR", "SG", "AU", "JP", "CN", "UNKNOWN"];
        if (!in_array($this->container['marketplace'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets business_prices
     * @return bool
     */
    public function getBusinessPrices()
    {
        return $this->container['business_prices'];
    }

    /**
     * Sets business_prices
     * @param bool $business_prices
     * @return $this
     */
    public function setBusinessPrices($business_prices)
    {
        $this->container['business_prices'] = $business_prices;

        return $this;
    }

    /**
     * Gets charset
     * @return string
     */
    public function getCharset()
    {
        return $this->container['charset'];
    }

    /**
     * Sets charset
     * @param string $charset
     * @return $this
     */
    public function setCharset($charset)
    {
        $allowed_values = array('ISO_8859_1', 'SHIFT_JIS', 'UTF_8', 'UTF_16');
        if (!is_null($charset) && (!in_array($charset, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'charset', must be one of 'ISO_8859_1', 'SHIFT_JIS', 'UTF_8', 'UTF_16'");
        }
        $this->container['charset'] = $charset;

        return $this;
    }

    /**
     * Gets marketplace
     * @return string
     */
    public function getMarketplace()
    {
        return $this->container['marketplace'];
    }

    /**
     * Sets marketplace
     * @param string $marketplace
     * @return $this
     */
    public function setMarketplace($marketplace)
    {
        $allowed_values = array('BR', 'CA', 'MX', 'US', 'AE', 'DE', 'EG', 'ES', 'FR', 'UK', 'IN', 'IT', 'NL', 'PL', 'SA', 'SE', 'TR', 'SG', 'AU', 'JP', 'CN', 'UNKNOWN');
        if (!is_null($marketplace) && (!in_array($marketplace, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'marketplace', must be one of 'BR', 'CA', 'MX', 'US', 'AE', 'DE', 'EG', 'ES', 'FR', 'UK', 'IN', 'IT', 'NL', 'PL', 'SA', 'SE', 'TR', 'SG', 'AU', 'JP', 'CN', 'UNKNOWN'");
        }
        $this->container['marketplace'] = $marketplace;

        return $this;
    }

    /**
     * Gets marketplace_id
     * @return string
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplace_id'];
    }

    /**
     * Sets marketplace_id
     * @param string $marketplace_id
     * @return $this
     */
    public function setMarketplaceId($marketplace_id)
    {
        $this->container['marketplace_id'] = $marketplace_id;

        return $this;
    }

    /**
     * Gets mws_endpoint
     * @return string
     */
    public function getMwsEndpoint()
    {
        return $this->container['mws_endpoint'];
    }

    /**
     * Sets mws_endpoint
     * @param string $mws_endpoint
     * @return $this
     */
    public function setMwsEndpoint($mws_endpoint)
    {
        $this->container['mws_endpoint'] = $mws_endpoint;

        return $this;
    }

    /**
     * Gets supported
     * @return bool
     */
    public function getSupported()
    {
        return $this->container['supported'];
    }

    /**
     * Sets supported
     * @param bool $supported
     * @return $this
     */
    public function setSupported($supported)
    {
        $this->container['supported'] = $supported;

        return $this;
    }

    /**
     * Gets inserted
     * @return \DateTime
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     * @param \DateTime $inserted
     * @return $this
     */
    public function setInserted($inserted)
    {
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets updated
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     * @param \DateTime $updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\eSagu\Amzn\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\eSagu\Amzn\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


