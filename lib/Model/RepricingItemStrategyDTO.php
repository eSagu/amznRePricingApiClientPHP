<?php
/**
 * RepricingItemStrategyDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  eSagu\Amzn\RePricing\V1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eSagu amzn RePricing API
 *
 * eSagu API to reprice items on amazon.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace eSagu\Amzn\RePricing\V1\Model;

use \ArrayAccess;

/**
 * RepricingItemStrategyDTO Class Doc Comment
 *
 * @category    Class
 * @description The repricing item&#39;s strategy. The repricing item&#39;s strategy is a container for the item&#39;s strategy and price settings.
 * @package     eSagu\Amzn\RePricing\V1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RepricingItemStrategyDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RepricingItemStrategyDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'business_price_settings_id' => 'int',
        'buy_box_settings_id' => 'int',
        'custom_code_id' => 'int',
        'exclusion_criteria_id' => 'int',
        'price_gap_id' => 'int',
        'price_settings' => '\eSagu\Amzn\RePricing\V1\Model\RepricingItemPriceSettingsDTO',
        'shipping_costs_id' => 'int',
        'inserted' => '\DateTime',
        'updated' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'business_price_settings_id' => 'businessPriceSettingsId',
        'buy_box_settings_id' => 'buyBoxSettingsId',
        'custom_code_id' => 'customCodeId',
        'exclusion_criteria_id' => 'exclusionCriteriaId',
        'price_gap_id' => 'priceGapId',
        'price_settings' => 'priceSettings',
        'shipping_costs_id' => 'shippingCostsId',
        'inserted' => 'inserted',
        'updated' => 'updated'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'business_price_settings_id' => 'setBusinessPriceSettingsId',
        'buy_box_settings_id' => 'setBuyBoxSettingsId',
        'custom_code_id' => 'setCustomCodeId',
        'exclusion_criteria_id' => 'setExclusionCriteriaId',
        'price_gap_id' => 'setPriceGapId',
        'price_settings' => 'setPriceSettings',
        'shipping_costs_id' => 'setShippingCostsId',
        'inserted' => 'setInserted',
        'updated' => 'setUpdated'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'business_price_settings_id' => 'getBusinessPriceSettingsId',
        'buy_box_settings_id' => 'getBuyBoxSettingsId',
        'custom_code_id' => 'getCustomCodeId',
        'exclusion_criteria_id' => 'getExclusionCriteriaId',
        'price_gap_id' => 'getPriceGapId',
        'price_settings' => 'getPriceSettings',
        'shipping_costs_id' => 'getShippingCostsId',
        'inserted' => 'getInserted',
        'updated' => 'getUpdated'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['business_price_settings_id'] = isset($data['business_price_settings_id']) ? $data['business_price_settings_id'] : null;
        $this->container['buy_box_settings_id'] = isset($data['buy_box_settings_id']) ? $data['buy_box_settings_id'] : null;
        $this->container['custom_code_id'] = isset($data['custom_code_id']) ? $data['custom_code_id'] : null;
        $this->container['exclusion_criteria_id'] = isset($data['exclusion_criteria_id']) ? $data['exclusion_criteria_id'] : null;
        $this->container['price_gap_id'] = isset($data['price_gap_id']) ? $data['price_gap_id'] : null;
        $this->container['price_settings'] = isset($data['price_settings']) ? $data['price_settings'] : null;
        $this->container['shipping_costs_id'] = isset($data['shipping_costs_id']) ? $data['shipping_costs_id'] : null;
        $this->container['inserted'] = isset($data['inserted']) ? $data['inserted'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets business_price_settings_id
     * @return int
     */
    public function getBusinessPriceSettingsId()
    {
        return $this->container['business_price_settings_id'];
    }

    /**
     * Sets business_price_settings_id
     * @param int $business_price_settings_id
     * @return $this
     */
    public function setBusinessPriceSettingsId($business_price_settings_id)
    {
        $this->container['business_price_settings_id'] = $business_price_settings_id;

        return $this;
    }

    /**
     * Gets buy_box_settings_id
     * @return int
     */
    public function getBuyBoxSettingsId()
    {
        return $this->container['buy_box_settings_id'];
    }

    /**
     * Sets buy_box_settings_id
     * @param int $buy_box_settings_id
     * @return $this
     */
    public function setBuyBoxSettingsId($buy_box_settings_id)
    {
        $this->container['buy_box_settings_id'] = $buy_box_settings_id;

        return $this;
    }

    /**
     * Gets custom_code_id
     * @return int
     */
    public function getCustomCodeId()
    {
        return $this->container['custom_code_id'];
    }

    /**
     * Sets custom_code_id
     * @param int $custom_code_id
     * @return $this
     */
    public function setCustomCodeId($custom_code_id)
    {
        $this->container['custom_code_id'] = $custom_code_id;

        return $this;
    }

    /**
     * Gets exclusion_criteria_id
     * @return int
     */
    public function getExclusionCriteriaId()
    {
        return $this->container['exclusion_criteria_id'];
    }

    /**
     * Sets exclusion_criteria_id
     * @param int $exclusion_criteria_id
     * @return $this
     */
    public function setExclusionCriteriaId($exclusion_criteria_id)
    {
        $this->container['exclusion_criteria_id'] = $exclusion_criteria_id;

        return $this;
    }

    /**
     * Gets price_gap_id
     * @return int
     */
    public function getPriceGapId()
    {
        return $this->container['price_gap_id'];
    }

    /**
     * Sets price_gap_id
     * @param int $price_gap_id
     * @return $this
     */
    public function setPriceGapId($price_gap_id)
    {
        $this->container['price_gap_id'] = $price_gap_id;

        return $this;
    }

    /**
     * Gets price_settings
     * @return \eSagu\Amzn\RePricing\V1\Model\RepricingItemPriceSettingsDTO
     */
    public function getPriceSettings()
    {
        return $this->container['price_settings'];
    }

    /**
     * Sets price_settings
     * @param \eSagu\Amzn\RePricing\V1\Model\RepricingItemPriceSettingsDTO $price_settings
     * @return $this
     */
    public function setPriceSettings($price_settings)
    {
        $this->container['price_settings'] = $price_settings;

        return $this;
    }

    /**
     * Gets shipping_costs_id
     * @return int
     */
    public function getShippingCostsId()
    {
        return $this->container['shipping_costs_id'];
    }

    /**
     * Sets shipping_costs_id
     * @param int $shipping_costs_id
     * @return $this
     */
    public function setShippingCostsId($shipping_costs_id)
    {
        $this->container['shipping_costs_id'] = $shipping_costs_id;

        return $this;
    }

    /**
     * Gets inserted
     * @return \DateTime
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     * @param \DateTime $inserted
     * @return $this
     */
    public function setInserted($inserted)
    {
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets updated
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     * @param \DateTime $updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\eSagu\Amzn\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\eSagu\Amzn\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


