<?php
/**
 * OptimizationResultActivityDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  eSagu\Amzn\RePricing\V1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eSagu amzn RePricing API
 *
 * eSagu API to reprice items on amazon.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace eSagu\Amzn\RePricing\V1\Model;

use \ArrayAccess;

/**
 * OptimizationResultActivityDTO Class Doc Comment
 *
 * @category    Class
 * @package     eSagu\Amzn\RePricing\V1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OptimizationResultActivityDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OptimizationResultActivityDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'meta' => 'string[]',
        'optimized_against_seller_id' => 'string',
        'optimized_price' => 'int',
        'updated' => '\DateTime',
        'inserted' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'meta' => 'meta',
        'optimized_against_seller_id' => 'optimizedAgainstSellerId',
        'optimized_price' => 'optimizedPrice',
        'updated' => 'updated',
        'inserted' => 'inserted'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'meta' => 'setMeta',
        'optimized_against_seller_id' => 'setOptimizedAgainstSellerId',
        'optimized_price' => 'setOptimizedPrice',
        'updated' => 'setUpdated',
        'inserted' => 'setInserted'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'meta' => 'getMeta',
        'optimized_against_seller_id' => 'getOptimizedAgainstSellerId',
        'optimized_price' => 'getOptimizedPrice',
        'updated' => 'getUpdated',
        'inserted' => 'getInserted'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const META_OPTIMIZED = 'OPTIMIZED';
    const META_FIXED = 'FIXED';
    const META_SUCCESS = 'SUCCESS';
    const META_MIN_PRICE_HIT = 'MIN_PRICE_HIT';
    const META_MAX_PRICE_HIT = 'MAX_PRICE_HIT';
    const META_SHIPPING_OK = 'SHIPPING_OK';
    const META_MATCHING_SELLER_NOT_FOUND = 'MATCHING_SELLER_NOT_FOUND';
    const META_NO_SHIPPING_FOUND = 'NO_SHIPPING_FOUND';
    const META_SHIPPING_SCALE_IS_AMBIGUOUS = 'SHIPPING_SCALE_IS_AMBIGUOUS';
    const META_SKIPPED = 'SKIPPED';
    const META_NO_PRICE_SETTINGS_FOUND = 'NO_PRICE_SETTINGS_FOUND';
    const META_NO_PRICE_GAPS_FOUND = 'NO_PRICE_GAPS_FOUND';
    const META_NO_EXCLUSION_CRITERIA_FOUND = 'NO_EXCLUSION_CRITERIA_FOUND';
    const META_MODE_IS_DISABLED = 'MODE_IS_DISABLED';
    const META_BUY_BOX = 'BUY_BOX';
    const META_I_AM_BB_OWNER = 'I_AM_BB_OWNER';
    const META_PRICE_DOWN_FOR_BB = 'PRICE_DOWN_FOR_BB';
    const META_PRICE_TO_BB_PRICE = 'PRICE_TO_BB_PRICE';
    const META_BB_AMBIGUOUS_OFFERS = 'BB_AMBIGUOUS_OFFERS';
    const META_BB_POTENTIAL_UP = 'BB_POTENTIAL_UP';
    const META_PRICE_UP_HAS_BB = 'PRICE_UP_HAS_BB';
    const META_PRICE_DOWN_HAS_BB = 'PRICE_DOWN_HAS_BB';
    const META_NO_COMPETITOR_PRICE_NOT_FOUND = 'NO_COMPETITOR_PRICE_NOT_FOUND';
    const META_TRIGGER_PRICE = 'TRIGGER_PRICE';
    const META_MY_OFFER_WAS_NOT_FOUND = 'MY_OFFER_WAS_NOT_FOUND';
    const META_BB_WITH_TRIGGER_VARIATION = 'BB_WITH_TRIGGER_VARIATION';
    const META_BB_FALLBACK_TO_OPTIMIZATION = 'BB_FALLBACK_TO_OPTIMIZATION';
    const META_BB_NOT_FEATURED_MERCHANT = 'BB_NOT_FEATURED_MERCHANT';
    const META_BB_UNEXPECTED_PRICE_CHANGE = 'BB_UNEXPECTED_PRICE_CHANGE';
    const META_CUSTOM_CODE = 'CUSTOM_CODE';
    const META_CUSTOM_CODE_NOT_VERIFIED = 'CUSTOM_CODE_NOT_VERIFIED';
    const META_CUSTOM_CODE_ERROR = 'CUSTOM_CODE_ERROR';
    const META_TRIGGER_OUTDATED = 'TRIGGER_OUTDATED';
    const META_BB_MARGIN_PROTECTION_ACTIVATED = 'BB_MARGIN_PROTECTION_ACTIVATED';
    const META_BB_PREVENTED_MARGIN_PROTECTION = 'BB_PREVENTED_MARGIN_PROTECTION';
    const META_OWN_MFN_ITEM_FOLLOWED_OWN_FBA_OFFER = 'OWN_MFN_ITEM_FOLLOWED_OWN_FBA_OFFER';
    const META_AI_ASSISTED_BB_PRICE = 'AI_ASSISTED_BB_PRICE';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMetaAllowableValues()
    {
        return [
            self::META_OPTIMIZED,
            self::META_FIXED,
            self::META_SUCCESS,
            self::META_MIN_PRICE_HIT,
            self::META_MAX_PRICE_HIT,
            self::META_SHIPPING_OK,
            self::META_MATCHING_SELLER_NOT_FOUND,
            self::META_NO_SHIPPING_FOUND,
            self::META_SHIPPING_SCALE_IS_AMBIGUOUS,
            self::META_SKIPPED,
            self::META_NO_PRICE_SETTINGS_FOUND,
            self::META_NO_PRICE_GAPS_FOUND,
            self::META_NO_EXCLUSION_CRITERIA_FOUND,
            self::META_MODE_IS_DISABLED,
            self::META_BUY_BOX,
            self::META_I_AM_BB_OWNER,
            self::META_PRICE_DOWN_FOR_BB,
            self::META_PRICE_TO_BB_PRICE,
            self::META_BB_AMBIGUOUS_OFFERS,
            self::META_BB_POTENTIAL_UP,
            self::META_PRICE_UP_HAS_BB,
            self::META_PRICE_DOWN_HAS_BB,
            self::META_NO_COMPETITOR_PRICE_NOT_FOUND,
            self::META_TRIGGER_PRICE,
            self::META_MY_OFFER_WAS_NOT_FOUND,
            self::META_BB_WITH_TRIGGER_VARIATION,
            self::META_BB_FALLBACK_TO_OPTIMIZATION,
            self::META_BB_NOT_FEATURED_MERCHANT,
            self::META_BB_UNEXPECTED_PRICE_CHANGE,
            self::META_CUSTOM_CODE,
            self::META_CUSTOM_CODE_NOT_VERIFIED,
            self::META_CUSTOM_CODE_ERROR,
            self::META_TRIGGER_OUTDATED,
            self::META_BB_MARGIN_PROTECTION_ACTIVATED,
            self::META_BB_PREVENTED_MARGIN_PROTECTION,
            self::META_OWN_MFN_ITEM_FOLLOWED_OWN_FBA_OFFER,
            self::META_AI_ASSISTED_BB_PRICE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
        $this->container['optimized_against_seller_id'] = isset($data['optimized_against_seller_id']) ? $data['optimized_against_seller_id'] : null;
        $this->container['optimized_price'] = isset($data['optimized_price']) ? $data['optimized_price'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['inserted'] = isset($data['inserted']) ? $data['inserted'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets meta
     * @return string[]
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     * @param string[] $meta
     * @return $this
     */
    public function setMeta($meta)
    {
        $allowed_values = array('OPTIMIZED', 'FIXED', 'SUCCESS', 'MIN_PRICE_HIT', 'MAX_PRICE_HIT', 'SHIPPING_OK', 'MATCHING_SELLER_NOT_FOUND', 'NO_SHIPPING_FOUND', 'SHIPPING_SCALE_IS_AMBIGUOUS', 'SKIPPED', 'NO_PRICE_SETTINGS_FOUND', 'NO_PRICE_GAPS_FOUND', 'NO_EXCLUSION_CRITERIA_FOUND', 'MODE_IS_DISABLED', 'BUY_BOX', 'I_AM_BB_OWNER', 'PRICE_DOWN_FOR_BB', 'PRICE_TO_BB_PRICE', 'BB_AMBIGUOUS_OFFERS', 'BB_POTENTIAL_UP', 'PRICE_UP_HAS_BB', 'PRICE_DOWN_HAS_BB', 'NO_COMPETITOR_PRICE_NOT_FOUND', 'TRIGGER_PRICE', 'MY_OFFER_WAS_NOT_FOUND', 'BB_WITH_TRIGGER_VARIATION', 'BB_FALLBACK_TO_OPTIMIZATION', 'BB_NOT_FEATURED_MERCHANT', 'BB_UNEXPECTED_PRICE_CHANGE', 'CUSTOM_CODE', 'CUSTOM_CODE_NOT_VERIFIED', 'CUSTOM_CODE_ERROR', 'TRIGGER_OUTDATED', 'BB_MARGIN_PROTECTION_ACTIVATED', 'BB_PREVENTED_MARGIN_PROTECTION', 'OWN_MFN_ITEM_FOLLOWED_OWN_FBA_OFFER', 'AI_ASSISTED_BB_PRICE');
        if (!is_null($meta) && (array_diff($meta, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'meta', must be one of 'OPTIMIZED', 'FIXED', 'SUCCESS', 'MIN_PRICE_HIT', 'MAX_PRICE_HIT', 'SHIPPING_OK', 'MATCHING_SELLER_NOT_FOUND', 'NO_SHIPPING_FOUND', 'SHIPPING_SCALE_IS_AMBIGUOUS', 'SKIPPED', 'NO_PRICE_SETTINGS_FOUND', 'NO_PRICE_GAPS_FOUND', 'NO_EXCLUSION_CRITERIA_FOUND', 'MODE_IS_DISABLED', 'BUY_BOX', 'I_AM_BB_OWNER', 'PRICE_DOWN_FOR_BB', 'PRICE_TO_BB_PRICE', 'BB_AMBIGUOUS_OFFERS', 'BB_POTENTIAL_UP', 'PRICE_UP_HAS_BB', 'PRICE_DOWN_HAS_BB', 'NO_COMPETITOR_PRICE_NOT_FOUND', 'TRIGGER_PRICE', 'MY_OFFER_WAS_NOT_FOUND', 'BB_WITH_TRIGGER_VARIATION', 'BB_FALLBACK_TO_OPTIMIZATION', 'BB_NOT_FEATURED_MERCHANT', 'BB_UNEXPECTED_PRICE_CHANGE', 'CUSTOM_CODE', 'CUSTOM_CODE_NOT_VERIFIED', 'CUSTOM_CODE_ERROR', 'TRIGGER_OUTDATED', 'BB_MARGIN_PROTECTION_ACTIVATED', 'BB_PREVENTED_MARGIN_PROTECTION', 'OWN_MFN_ITEM_FOLLOWED_OWN_FBA_OFFER', 'AI_ASSISTED_BB_PRICE'");
        }
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets optimized_against_seller_id
     * @return string
     */
    public function getOptimizedAgainstSellerId()
    {
        return $this->container['optimized_against_seller_id'];
    }

    /**
     * Sets optimized_against_seller_id
     * @param string $optimized_against_seller_id
     * @return $this
     */
    public function setOptimizedAgainstSellerId($optimized_against_seller_id)
    {
        $this->container['optimized_against_seller_id'] = $optimized_against_seller_id;

        return $this;
    }

    /**
     * Gets optimized_price
     * @return int
     */
    public function getOptimizedPrice()
    {
        return $this->container['optimized_price'];
    }

    /**
     * Sets optimized_price
     * @param int $optimized_price
     * @return $this
     */
    public function setOptimizedPrice($optimized_price)
    {
        $this->container['optimized_price'] = $optimized_price;

        return $this;
    }

    /**
     * Gets updated
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     * @param \DateTime $updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets inserted
     * @return \DateTime
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     * @param \DateTime $inserted
     * @return $this
     */
    public function setInserted($inserted)
    {
        $this->container['inserted'] = $inserted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\eSagu\Amzn\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\eSagu\Amzn\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


